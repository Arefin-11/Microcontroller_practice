
Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000320  00000000  00000000  0000016b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  0000048b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002c2  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bd  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000118  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	51 c0       	rjmp	.+162    	; 0xd8 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>
int main (void)
{
  38:	0f 93       	push	r16
  3a:	1f 93       	push	r17
	DDRB = 0b11111111;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b00000000;
  40:	14 ba       	out	0x14, r1	; 20
	DDRD = 0b00001100;
  42:	8c e0       	ldi	r24, 0x0C	; 12
  44:	81 bb       	out	0x11, r24	; 17
	while (1)
	{
		if(bit_is_set(PINC,0))
		{
			PORTB = 0b00000001;
  46:	01 e0       	ldi	r16, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  48:	24 ed       	ldi	r18, 0xD4	; 212
  4a:	30 e3       	ldi	r19, 0x30	; 48
			PORTD = 0b00000000;
			_delay_ms(50);
			
			PORTB = 0b00000011;
  4c:	13 e0       	ldi	r17, 0x03	; 3
			PORTD = 0b00000000;
			_delay_ms(50);
			
			PORTB = 0b00000111;
  4e:	b7 e0       	ldi	r27, 0x07	; 7
			PORTD = 0b00000000;
			_delay_ms(50);
			
			PORTB = 0b00001111;
  50:	af e0       	ldi	r26, 0x0F	; 15
			PORTD = 0b00000000;
			_delay_ms(50);
			
			PORTB = 0b00011111;
  52:	ff e1       	ldi	r31, 0x1F	; 31
			PORTD = 0b00000000;
			_delay_ms(50);
			
			PORTB = 0b00111111;
  54:	ef e3       	ldi	r30, 0x3F	; 63
			PORTD = 0b00000000;
			_delay_ms(50);
			
			PORTB = 0b01111111;
  56:	7f e7       	ldi	r23, 0x7F	; 127
			PORTD = 0b00000000;
			_delay_ms(50);
			
			PORTB = 0b11111111;
  58:	4f ef       	ldi	r20, 0xFF	; 255
			PORTD = 0b00000000;
			_delay_ms(50);
			
			
			PORTB = 0b11111111;
			PORTD = 0b00000100;
  5a:	64 e0       	ldi	r22, 0x04	; 4
			_delay_ms(50);
			
			PORTB = 0b11111111;
			PORTD = 0b00001100;
  5c:	5c e0       	ldi	r21, 0x0C	; 12
	DDRB = 0b11111111;
	DDRC = 0b00000000;
	DDRD = 0b00001100;
	while (1)
	{
		if(bit_is_set(PINC,0))
  5e:	98 9b       	sbis	0x13, 0	; 19
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__SREG__+0x93>
		{
			PORTB = 0b00000001;
  62:	08 bb       	out	0x18, r16	; 24
			PORTD = 0b00000000;
  64:	12 ba       	out	0x12, r1	; 18
  66:	c9 01       	movw	r24, r18
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <__SREG__+0x29>
			_delay_ms(50);
			
			PORTB = 0b00000011;
  6c:	18 bb       	out	0x18, r17	; 24
			PORTD = 0b00000000;
  6e:	12 ba       	out	0x12, r1	; 18
  70:	c9 01       	movw	r24, r18
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
			_delay_ms(50);
			
			PORTB = 0b00000111;
  76:	b8 bb       	out	0x18, r27	; 24
			PORTD = 0b00000000;
  78:	12 ba       	out	0x12, r1	; 18
  7a:	c9 01       	movw	r24, r18
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <__SREG__+0x3d>
			_delay_ms(50);
			
			PORTB = 0b00001111;
  80:	a8 bb       	out	0x18, r26	; 24
			PORTD = 0b00000000;
  82:	12 ba       	out	0x12, r1	; 18
  84:	c9 01       	movw	r24, r18
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <__SREG__+0x47>
			_delay_ms(50);
			
			PORTB = 0b00011111;
  8a:	f8 bb       	out	0x18, r31	; 24
			PORTD = 0b00000000;
  8c:	12 ba       	out	0x12, r1	; 18
  8e:	c9 01       	movw	r24, r18
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <__SREG__+0x51>
			_delay_ms(50);
			
			PORTB = 0b00111111;
  94:	e8 bb       	out	0x18, r30	; 24
			PORTD = 0b00000000;
  96:	12 ba       	out	0x12, r1	; 18
  98:	c9 01       	movw	r24, r18
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <__SREG__+0x5b>
			_delay_ms(50);
			
			PORTB = 0b01111111;
  9e:	78 bb       	out	0x18, r23	; 24
			PORTD = 0b00000000;
  a0:	12 ba       	out	0x12, r1	; 18
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__SREG__+0x65>
			_delay_ms(50);
			
			PORTB = 0b11111111;
  a8:	48 bb       	out	0x18, r20	; 24
			PORTD = 0b00000000;
  aa:	12 ba       	out	0x12, r1	; 18
  ac:	c9 01       	movw	r24, r18
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <__SREG__+0x6f>
			_delay_ms(50);
			
			
			PORTB = 0b11111111;
  b2:	48 bb       	out	0x18, r20	; 24
			PORTD = 0b00000100;
  b4:	62 bb       	out	0x12, r22	; 18
  b6:	c9 01       	movw	r24, r18
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <__SREG__+0x79>
			_delay_ms(50);
			
			PORTB = 0b11111111;
  bc:	48 bb       	out	0x18, r20	; 24
			PORTD = 0b00001100;
  be:	52 bb       	out	0x12, r21	; 18
  c0:	c9 01       	movw	r24, r18
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <__SREG__+0x83>
			_delay_ms(50);
			
			PORTB = 0b00000000;
  c6:	18 ba       	out	0x18, r1	; 24
			PORTD = 0b00000000;
  c8:	12 ba       	out	0x12, r1	; 18
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <__SREG__+0x8d>
  d0:	c6 cf       	rjmp	.-116    	; 0x5e <__SREG__+0x1f>
			_delay_ms(50);
		}
		else
		{	
			PORTB = 0b00000000;
  d2:	18 ba       	out	0x18, r1	; 24
			PORTD = 0b00000000;
  d4:	12 ba       	out	0x12, r1	; 18
  d6:	c3 cf       	rjmp	.-122    	; 0x5e <__SREG__+0x1f>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
