
multiplexing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000340  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010c  00000000  00000000  00000543  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000301  00000000  00000000  0000064f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c9  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000118  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	9d c0       	rjmp	.+314    	; 0x170 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>
int main(void)
{
  38:	6f 92       	push	r6
  3a:	7f 92       	push	r7
  3c:	8f 92       	push	r8
  3e:	9f 92       	push	r9
  40:	af 92       	push	r10
  42:	bf 92       	push	r11
  44:	cf 92       	push	r12
  46:	df 92       	push	r13
  48:	ef 92       	push	r14
  4a:	ff 92       	push	r15
  4c:	0f 93       	push	r16
  4e:	1f 93       	push	r17
  50:	df 93       	push	r29
  52:	cf 93       	push	r28
  54:	cd b7       	in	r28, 0x3d	; 61
  56:	de b7       	in	r29, 0x3e	; 62
  58:	64 97       	sbiw	r28, 0x14	; 20
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	f8 94       	cli
  5e:	de bf       	out	0x3e, r29	; 62
  60:	0f be       	out	0x3f, r0	; 63
  62:	cd bf       	out	0x3d, r28	; 61
	int i=0;
	DDRB = 0b01111111;
  64:	8f e7       	ldi	r24, 0x7F	; 127
  66:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b00000000;
  68:	14 ba       	out	0x14, r1	; 20
	DDRD = 0b00000011;
  6a:	83 e0       	ldi	r24, 0x03	; 3
  6c:	81 bb       	out	0x11, r24	; 17
	int a[10];
	a[0]= 0b00111111;
  6e:	8f e3       	ldi	r24, 0x3F	; 63
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	9a 83       	std	Y+2, r25	; 0x02
  74:	89 83       	std	Y+1, r24	; 0x01
	a[1]= 0b00000110;
  76:	86 e0       	ldi	r24, 0x06	; 6
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	9c 83       	std	Y+4, r25	; 0x04
  7c:	8b 83       	std	Y+3, r24	; 0x03
	a[2]= 0b01011011;
  7e:	8b e5       	ldi	r24, 0x5B	; 91
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	9e 83       	std	Y+6, r25	; 0x06
  84:	8d 83       	std	Y+5, r24	; 0x05
	a[3]= 0b01001111;
  86:	8f e4       	ldi	r24, 0x4F	; 79
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	98 87       	std	Y+8, r25	; 0x08
  8c:	8f 83       	std	Y+7, r24	; 0x07
	a[4]= 0b01100110;
  8e:	86 e6       	ldi	r24, 0x66	; 102
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	9a 87       	std	Y+10, r25	; 0x0a
  94:	89 87       	std	Y+9, r24	; 0x09
	a[5]= 0b01101101;
  96:	8d e6       	ldi	r24, 0x6D	; 109
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	9c 87       	std	Y+12, r25	; 0x0c
  9c:	8b 87       	std	Y+11, r24	; 0x0b
	a[6]= 0b01111101;
  9e:	8d e7       	ldi	r24, 0x7D	; 125
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	9e 87       	std	Y+14, r25	; 0x0e
  a4:	8d 87       	std	Y+13, r24	; 0x0d
	a[7]= 0b00000111;
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	98 8b       	std	Y+16, r25	; 0x10
  ac:	8f 87       	std	Y+15, r24	; 0x0f
	a[8]= 0b01111111;
  ae:	8f e7       	ldi	r24, 0x7F	; 127
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	9a 8b       	std	Y+18, r25	; 0x12
  b4:	89 8b       	std	Y+17, r24	; 0x11
	a[9]= 0b01101111;
  b6:	8f e6       	ldi	r24, 0x6F	; 111
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9c 8b       	std	Y+20, r25	; 0x14
  bc:	8b 8b       	std	Y+19, r24	; 0x13
	while(1)
	{
		if(bit_is_set(PINC,0))
  be:	de 01       	movw	r26, r28
  c0:	11 96       	adiw	r26, 0x01	; 1
		{
			for (i=0;i<10;i++)
			{
				PORTD = 0b00000010;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	68 2e       	mov	r6, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	6c e7       	ldi	r22, 0x7C	; 124
  c8:	72 e9       	ldi	r23, 0x92	; 146
				PORTB = a[i];
				_delay_ms(150);
				PORTD = 0b00000001;
  ca:	77 24       	eor	r7, r7
  cc:	73 94       	inc	r7
			
			//for 0
			PORTB = 0b00111111;
  ce:	0f e3       	ldi	r16, 0x3F	; 63
  d0:	80 2e       	mov	r8, r16
  d2:	20 e5       	ldi	r18, 0x50	; 80
  d4:	33 ec       	ldi	r19, 0xC3	; 195
			_delay_ms(200);
			//for 1
			PORTB = 0b00000110;
  d6:	16 e0       	ldi	r17, 0x06	; 6
  d8:	91 2e       	mov	r9, r17
			_delay_ms(200);
			//for 2
			PORTB = 0b01011011;
  da:	fb e5       	ldi	r31, 0x5B	; 91
  dc:	af 2e       	mov	r10, r31
			_delay_ms(200);
			//for 3
			PORTB = 0b01001111;
  de:	ef e4       	ldi	r30, 0x4F	; 79
  e0:	be 2e       	mov	r11, r30
			_delay_ms(200);
			//for 4
			PORTB = 0b01100110;
  e2:	56 e6       	ldi	r21, 0x66	; 102
  e4:	c5 2e       	mov	r12, r21
			_delay_ms(200);
			//for 5
			PORTB = 0b01101101;
  e6:	4d e6       	ldi	r20, 0x6D	; 109
  e8:	d4 2e       	mov	r13, r20
			_delay_ms(200);
			//for 6 
			PORTB = 0b01111101;
  ea:	9d e7       	ldi	r25, 0x7D	; 125
  ec:	e9 2e       	mov	r14, r25
	a[9]= 0b01101111;
	while(1)
	{
		if(bit_is_set(PINC,0))
		{
			for (i=0;i<10;i++)
  ee:	ae 01       	movw	r20, r28
  f0:	4b 5e       	subi	r20, 0xEB	; 235
  f2:	5f 4f       	sbci	r21, 0xFF	; 255
	a[7]= 0b00000111;
	a[8]= 0b01111111;
	a[9]= 0b01101111;
	while(1)
	{
		if(bit_is_set(PINC,0))
  f4:	98 9b       	sbis	0x13, 0	; 19
  f6:	3a c0       	rjmp	.+116    	; 0x16c <__SREG__+0x12d>
  f8:	fd 01       	movw	r30, r26
			_delay_ms(200);
			//for 6 
			PORTB = 0b01111101;
			_delay_ms(200);
			//for 7
			PORTB = 0b00000111;
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	f8 2e       	mov	r15, r24
			_delay_ms(200);
			//for 8
			PORTB = 0b01111111;
  fe:	0f e7       	ldi	r16, 0x7F	; 127
			_delay_ms(200);
			//for 9
			PORTB = 0b01101111;
 100:	1f e6       	ldi	r17, 0x6F	; 111
	{
		if(bit_is_set(PINC,0))
		{
			for (i=0;i<10;i++)
			{
				PORTD = 0b00000010;
 102:	62 ba       	out	0x12, r6	; 18
				PORTB = a[i];
 104:	80 81       	ld	r24, Z
 106:	88 bb       	out	0x18, r24	; 24
 108:	cb 01       	movw	r24, r22
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <__SREG__+0xcb>
				_delay_ms(150);
				PORTD = 0b00000001;
 10e:	72 ba       	out	0x12, r7	; 18
			
			//for 0
			PORTB = 0b00111111;
 110:	88 ba       	out	0x18, r8	; 24
 112:	c9 01       	movw	r24, r18
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <__SREG__+0xd5>
			_delay_ms(200);
			//for 1
			PORTB = 0b00000110;
 118:	98 ba       	out	0x18, r9	; 24
 11a:	c9 01       	movw	r24, r18
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <__SREG__+0xdd>
			_delay_ms(200);
			//for 2
			PORTB = 0b01011011;
 120:	a8 ba       	out	0x18, r10	; 24
 122:	c9 01       	movw	r24, r18
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <__SREG__+0xe5>
			_delay_ms(200);
			//for 3
			PORTB = 0b01001111;
 128:	b8 ba       	out	0x18, r11	; 24
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <__SREG__+0xed>
			_delay_ms(200);
			//for 4
			PORTB = 0b01100110;
 130:	c8 ba       	out	0x18, r12	; 24
 132:	c9 01       	movw	r24, r18
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <__SREG__+0xf5>
			_delay_ms(200);
			//for 5
			PORTB = 0b01101101;
 138:	d8 ba       	out	0x18, r13	; 24
 13a:	c9 01       	movw	r24, r18
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <__SREG__+0xfd>
			_delay_ms(200);
			//for 6 
			PORTB = 0b01111101;
 140:	e8 ba       	out	0x18, r14	; 24
 142:	c9 01       	movw	r24, r18
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <__SREG__+0x105>
			_delay_ms(200);
			//for 7
			PORTB = 0b00000111;
 148:	f8 ba       	out	0x18, r15	; 24
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <__SREG__+0x10d>
			_delay_ms(200);
			//for 8
			PORTB = 0b01111111;
 150:	08 bb       	out	0x18, r16	; 24
 152:	c9 01       	movw	r24, r18
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <__SREG__+0x115>
			_delay_ms(200);
			//for 9
			PORTB = 0b01101111;
 158:	18 bb       	out	0x18, r17	; 24
 15a:	c9 01       	movw	r24, r18
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <__SREG__+0x11d>
 160:	32 96       	adiw	r30, 0x02	; 2
	a[9]= 0b01101111;
	while(1)
	{
		if(bit_is_set(PINC,0))
		{
			for (i=0;i<10;i++)
 162:	e4 17       	cp	r30, r20
 164:	f5 07       	cpc	r31, r21
 166:	09 f0       	breq	.+2      	; 0x16a <__SREG__+0x12b>
 168:	cc cf       	rjmp	.-104    	; 0x102 <__SREG__+0xc3>
 16a:	c4 cf       	rjmp	.-120    	; 0xf4 <__SREG__+0xb5>
			PORTB = 0b01101111;
			_delay_ms(200);
			}
		}
		else
			PORTB = 0b00000000;
 16c:	18 ba       	out	0x18, r1	; 24
 16e:	c2 cf       	rjmp	.-124    	; 0xf4 <__SREG__+0xb5>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
